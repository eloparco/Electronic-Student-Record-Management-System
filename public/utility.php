<?php
include("send_mail.php");//need the /vendor/autoload.php file generated by composer

define("LOGIN_TEACHER_OK", "Login Teacher success.");
define("LOGIN_PARENT_OK", "Login Parent success.");
define("LOGIN_SECRETARY_OK", "Login Secretary Officer success.");
define("LOGIN_PRINCIPAL_OK", "Login Principal success.");
define("LOGIN_ADMIN_OK", "Login Admin success.");
define("LOGIN_USER_NOT_DEFINED", "User not defined.");
define("LOGIN_FAILED", "Login failed.");
define("USER_ALREADY_EXIST", "SSN already exists.");
define("USER_IS_A_STUDENT", "User is a student.");
define("INSERT_PARENT_OK", "Parent inserted successfully.");
define("INSERT_PARENT_FAILED", "Insert Parent failed.");
define("INSERT_ACCOUNT_OK", "Account inserted successfully.");
define("UPDATE_ACCOUNT_OK", "Account updated successfully.");
define("INSERT_ACCOUNT_FAILED", "Insert Account failed.");
define("CHANGE_PASSWORD", "Password entered needs to be changed");
define("GET_COMMUNICATIONS_FAILED", "Error on getting official communications.");
define("DB_ERROR", "Error on db connection.");
define("DB_QUERY_ERROR", "Error on query db.");
define("PASSWORD_INCORRECT", "Password entered is incorrect.");
define("EMAIL_INCORRECT", "Email entered is incorrect.");
define("SSN_INCORRECT", "SSN entered is incorrect.");
define("NAME_INCORRECT", "Name entered is incorrect.");
define("SURNAME_INCORRECT", "Surname entered is incorrect.");
define("USERTYPE_INCORRECT", "User type not recognized.");
define("LOGIN_NOT_MATCH", "Invalid username or password.");
define("SESSION_EXPIRED", "session-expired");
define("TOPIC_RECORDING_FAILED", "Topic recording failed.");
define("TOPIC_RECORDING_OK", "Topics correctly recorded.");
define("TOPIC_RECORDING_INCORRECT", "Please fill all the fields during topic recording.");
define("MARK_RECORDING_OK", "Mark correctly recorded.");
define("MARK_RECORDING_FAILED", "Mark recording failed.");
define("STUDENT_RECORDING_OK", "Student correctly recorded.");
define("STUDENT_RECORDING_FAILED", "Student recording failed.");
define("MAX_ROLES_ALLOWED", "The account cannot take other roles.");
define("ROLE_ALREADY_TAKEN", "The account has already this role.");
define("ROLE_NOT_ALLOWED", "The account cannot take this role.");
define("SSN_OF_CHILD", "The SSN inserted is that of a child.");
define("STUDENT_ABSENT", "The selected student is absent.");
define("PUBLISH_TIMETABLE_OK", "Timetable correclty uploaded.");
define("PUBLISH_TIMETABLE_FAILED", "Invalid file.");
define("WRONG_FILE_FORMAT", "The file format is not correct.");
define("MISSING_INPUT", "Please fill all inputs.");
define("SUBJECT_INCORRECT", "Unknown subject in the uploaded file.");
define("TOPIC_RECORDING_WRONG_DATE", "Date entered is wrong.");
define("MAX_INACTIVITY", 99999999);
define("DEFAULT_PASSWORD_LENGTH", 8);
define("COMMUNICATION_RECORDING_INCORRECT", "Please fill all the fields during communication recording.");
define("COMMUNICATION_RECORDING_FAILED", "Communication recording failed.");
define("COMMUNICATION_RECORDING_OK","Communication correctly recorded.");
define("ASSIGNMENT_RECORDING_INCORRECT", "Please fill all the fields during assignment recording.");
define("ASSIGNMENT_RECORDING_FAILED", "Assignment recording failed.");
define("ASSIGNMENT_RECORDING_OK", "Assignment correctly recorded.");
define("WRONG_FILE_EXTENSION","File type not supported");
define("FILE_TOO_BIG","The file size is too big. Max size: 2MB");
define("FILE_ALREADY_EXISTS", "The file already exists.");
define("FILE_UPLOAD_ERROR","Error during file uploading.");
define("MSG", "msg_result");
// Note: Give the following directory R/W rights for "other" group
define("UPLOAD_PATH", "uploads/");
define("NOTE_RECORDING_INCORRECT", "Please fill all the fields during note recording.");
define("NOTE_RECORDING_FAILED", "Note recording failed.");
define("NOTE_RECORDING_OK", "Note correctly recorded.");
define("USER_TYPE", "myUserType");
define("HTTP_REDIRECT_MSG", "HTTP/1.1 307 temporary redirect");
define("LOCATION_LABEL", "Location: ");
define("TEACHER_TYPE", "TEACHER");
define("SECRETARY_OFFICER_TYPE", "SECRETARY_OFFICER");
define("SYS_ADMIN_TYPE", "SYS_ADMIN");
define("PARENT_TYPE", "PARENT");
define("PRINCIPAL_TYPE", "PRINCIPAL");
define("ERROR_QUERY_MSG","Error in preparing query: ");
define("HINT_ERROR_MSG", "Check database error:<br>");
define("SURNAME", "Surname");
define("NAME", "Name");
define("ERROR_BINDING_MARK_PREP", "Error in binding paramters to marks_prep.");
define("CLASS_SCHOOL", "Class");
define("TITLE", "Title");
define("CHILD", "child");
define("DESCRIPTION", "Description");
define("ERROR_MSG_DB_CONN", "Error in connection to database. [Retrieving subjects of student]");
define("SUNDAY_LAST_WK", "sunday last week");
define("SUNDAY_THIS_WK", "sunday this week");
define("CUSTOM_DATE_FORMAT", "d/m/Y");
define("HINT_RETRY", "Please retry.");

class UtilityException extends Exception {
    public function errorMessage() {
      //error message
      return 'Error on line '.$this->getLine().' in '.$this->getFile()
      .': <b>'.$this->getMessage().'</b>';
    }
  }

function connect_to_db($ini_path_test='') {
    $ini_path = '../config/database/database.ini';

    if ($ini_path_test !== ''){
        $ini_path = $ini_path_test;
    }
    $db = parse_ini_file($ini_path);

    $user = $db['user'];
    $pass = $db['pass'];
    $name = $db['name'];
    $host = $db['host'];

    $conn = mysqli_connect($host, $user, $pass, $name); //returns FALSE on error
    if($conn){
        $conn->set_charset("utf8");
    }
    return $conn;
}

function myDestroySession() {
    $_SESSION = array();
    if(ini_get("session.use_cookies")) {
        $params = session_get_cookie_params();
        setcookie(session_name(), '', time()-3600*24, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);
    }
    session_destroy();
}

function userLoggedIn() {
    if(isset($_SESSION['mySession'])){
        return $_SESSION['mySession'];
    } else{ 
        return false;
    }
}

function userTypeLoggedIn($type) {
    if(isset($_SESSION[USER_TYPE]) && $_SESSION[USER_TYPE] == $type){
        return $_SESSION[USER_TYPE];
    }else{ 
        return false;
    }
}

function myRedirectHome($msg="") {
    header(HTTP_REDIRECT_MSG);
    header("Location: index.php?msg=".urlencode($msg));
    exit;
}

function myRedirectTo($toRedirect, $msg="") {
    header(HTTP_REDIRECT_MSG);
    header(LOCATION_LABEL.$toRedirect.'?msg='.urlencode($msg));
    exit;
}

function redirect($new_location, $msg=''){
    if(!empty($msg)){
        $_SESSION[MSG] = $msg;
    }    
    header("HTTP/1.1 303 See Other");
    header(LOCATION_LABEL.$new_location);
    exit;
}

function myRedirectToHTTPS($toRedirect) {
    header('HTTP/1.1 301 Moved Permanently');
    header(LOCATION_LABEL.$toRedirect);
}

function checkPassword($pwd) {
    return strlen($pwd) >= 2 && preg_match("#[a-z]+#", $pwd) && (preg_match("#[0-9]+#", $pwd) || preg_match("#[A-Z]+#", $pwd));
}

function checkEmail($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL);
}

function checkSSN($ssn) {
    if($ssn == '' || strlen($ssn) != 16){
        return false;
    }
    $ssn = strtoupper($ssn);
    return preg_match("/[A-Z0-9]+$/", $ssn);
}

function checkNormalText($input) {
    return strlen($input) >= 2 && strlen($input) < 20;
}

function checkUserType($type) {
    return $type === TEACHER_TYPE || $type === SECRETARY_OFFICER_TYPE || $type === PARENT_TYPE
        || $type === PRINCIPAL_TYPE || $type === SYS_ADMIN_TYPE;
}

function generatePass() {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; 
    $randomString = ''; 
  
    for ($i = 0; $i < DEFAULT_PASSWORD_LENGTH; $i++) { 
        $index = rand(0, strlen($characters) - 1); 
        $randomString .= $characters[$index]; 
    } 
  
    return $randomString; 
}

function mySanitizeString($var) {
	$var = strip_tags($var); //remove all HTML and PHP tag, and also NULL characters
    $var = htmlentities($var); //convert all special characters in HTML entities
    if(get_magic_quotes_gpc()){
        $var = stripslashes($var); //remove backslashes
    }
    return $var;
}

### functions to login and retrieve roles
# retrieve roles of a single user
function get_roles_per_user($username, $ini_path=''){
    $roles_query = "SELECT UserType\n" .
                   "FROM USER_TYPE UT, USER U\n" .
                   "WHERE UT.SSN=U.SSN AND U.Email=?";
    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Roles query]'."\n");
    }
    $roles_prep = mysqli_prepare($db_con, $roles_query);
    if(!$roles_prep){
        print(ERROR_QUERY_MSG.$roles_query);
        die(HINT_ERROR_MSG.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($roles_prep, "s", $username)){
        die('Error in binding parameters for roles_prep.'."\n");
    }
    if(!mysqli_stmt_execute($roles_prep)){
        die('Error in executing roles query. Check database error:<br>'.mysqli_error($db_con));
    }
    $roles_res = mysqli_stmt_get_result($roles_prep);
    $roles = array();
    while($row = mysqli_fetch_array($roles_res, MYSQLI_ASSOC)){
        $roles[] = $row['UserType'];
    }
    mysqli_stmt_close($roles_prep);
    return $roles;
}

# login -> only credentials check
function tryLogin($username, $password, $ini_path='') {
    $con = connect_to_db($ini_path);

    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "SELECT Password, AccountActivated FROM `USER` WHERE Email = ?")){
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "s", $username)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_result($prep, $dbPass, $isActive)){
                throw new UtilityException();  
            }
            if(!mysqli_stmt_store_result($prep)){
                throw new UtilityException();
            }

            $count = mysqli_stmt_num_rows($prep);
            if($count == 0) { //email not found in db
                mysqli_stmt_close($prep);
                mysqli_close($con);
                return LOGIN_NOT_MATCH;
            } else {
                if(!mysqli_stmt_fetch($prep)){
                    throw new UtilityException(); 
                }
                if($password == $dbPass && $isActive == 1) {
                    mysqli_stmt_close($prep);
                    mysqli_close($con);

                    $dbUserType = get_roles_per_user($username, $ini_path)[0];
                    if($dbUserType == TEACHER_TYPE){
                        return LOGIN_TEACHER_OK;
                    } else if($dbUserType == PARENT_TYPE){
                        return LOGIN_PARENT_OK;
                    } else if($dbUserType == SECRETARY_OFFICER_TYPE){
                        return LOGIN_SECRETARY_OK;
                    } else if($dbUserType == PRINCIPAL_TYPE){
                        return LOGIN_PRINCIPAL_OK;
                    } else if($dbUserType == SYS_ADMIN_TYPE){
                        return LOGIN_ADMIN_OK;
                    } else {
                        return LOGIN_USER_NOT_DEFINED;
                    }
                } else if($password == $dbPass && $isActive == 0) { //password needs to be changed
                    mysqli_stmt_close($prep);
                    mysqli_close($con);
                    return CHANGE_PASSWORD;
                } else { //password not correct 
                    mysqli_stmt_close($prep);
                    mysqli_close($con);
                    return LOGIN_NOT_MATCH;
                }
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return LOGIN_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function check_change_role($username, $role, $ini_path=''){
    $roles_query = "SELECT UserType\n" .
                   "FROM USER_TYPE UT, USER U\n" .
                   "WHERE UT.SSN=U.SSN AND U.Email=?";
    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Roles query]'."\n");
    }
    $roles_prep = mysqli_prepare($db_con, $roles_query);
    if(!$roles_prep){
        print(ERROR_QUERY_MSG.$roles_query);
        die(HINT_ERROR_MSG.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($roles_prep, "s", $username)){
        die('Error in binding parameters for roles_prep.'."\n");
    }
    if(!mysqli_stmt_execute($roles_prep)){
        die('Error in executing roles query. Check database error:<br>'.mysqli_error($db_con));
    }
    $roles_res = mysqli_stmt_get_result($roles_prep);
    $role_ok = false;
    while($row = mysqli_fetch_array($roles_res, MYSQLI_ASSOC)){
        if($row['UserType'] === $role){
            $role_ok = true;
        }
    }
    mysqli_stmt_close($roles_prep);
    return $role_ok;
}
### END functions to login and retrieve roles

function tryInsertParent($ssn, $name, $surname, $username, $password, $usertype, $accountactivated, $ini_path='') {
    $con = connect_to_db($ini_path);
    
    if($con && mysqli_connect_error() == NULL) {
        mysqli_autocommit($con, FALSE);
        try {
            /* Check if is a student */
            if(!$prep = mysqli_prepare($con, "SELECT * FROM `CHILD` WHERE SSN = ? FOR UPDATE")){
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "s", $ssn)){
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)){
                throw new UtilityException();
            }
            if(!mysqli_stmt_store_result($prep)){
                throw new UtilityException();
            }
            $count = mysqli_stmt_num_rows($prep);
            mysqli_stmt_free_result($prep);
            mysqli_stmt_close($prep);
            if($count == 1) {
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return USER_IS_A_STUDENT;
            }
            else {
                /* Check if user already exists */
                if(!$prep4 = mysqli_prepare($con, "SELECT * FROM `USER` WHERE SSN = ? FOR UPDATE")){
                    throw new UtilityException();
                }
                if(!mysqli_stmt_bind_param($prep4, "s", $ssn)) {
                    throw new UtilityException();
                }
                if(!mysqli_stmt_execute($prep4)){
                    throw new UtilityException();
                }
                if(!mysqli_stmt_store_result($prep4)){
                    throw new UtilityException();
                }
                $count2 = mysqli_stmt_num_rows($prep4);
                mysqli_stmt_free_result($prep4);
                mysqli_stmt_close($prep4);
                if($count2 == 1) {
                    mysqli_rollback($con);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return USER_ALREADY_EXIST;
                } 
                else {
                    /* Insert parent data into db */
                    if(!$prep2 = mysqli_prepare($con, "INSERT INTO `USER` (`SSN`, `Name`, `Surname`, `Email`, `Password`, `AccountActivated`) VALUES (?, ?, ?, ?, ?, ?)")){
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_bind_param($prep2, "sssssi", $ssn, $name, $surname, $username, $password, $accountactivated)) {
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_execute($prep2)) {
                        throw new UtilityException();
                    }else { 
                        mysqli_stmt_close($prep2);
                        /* Insert parent data into db */
                        if(!$prep3 = mysqli_prepare($con, "INSERT INTO `USER_TYPE` (`SSN`, `UserType`) VALUES (?, ?)")){
                            throw new UtilityException();
                        }
                        if(!mysqli_stmt_bind_param($prep3, "ss", $ssn, $usertype)) {
                            throw new UtilityException();
                        }
                        if(!mysqli_stmt_execute($prep3)) {
                            throw new UtilityException();
                        }else {
                            mysqli_stmt_close($prep3);
                            if(!mysqli_commit($con)) {// do the final commit
                                throw new UtilityException();
                            }
                            sendMail($username, $password);//to send real e-mail
                            mysqli_autocommit($con, TRUE);
                            mysqli_close($con);
                            return INSERT_PARENT_OK;
                        }
                    }
                }
            }
        } catch (Exception $e) {
            mysqli_rollback($con);
            mysqli_autocommit($con, TRUE);
            mysqli_close($con);
            return INSERT_PARENT_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function tryInsertAccount($ssn, $name, $surname, $username, $password, $usertype, $accountactivated, $ini_path='') {
    $con = connect_to_db($ini_path);

    if($con && mysqli_connect_error() == NULL) {
        mysqli_autocommit($con, FALSE);
        try {
            /* Check if is an SSN of one child -> error */
            if(!$prep5 = mysqli_prepare($con, "SELECT * FROM CHILD WHERE SSN = ? LIMIT 1")){
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep5, "s", $ssn)) {
                throw new UtilityException();
            }   
            if(!mysqli_stmt_execute($prep5)){
                throw new UtilityException();
            }
            if(!mysqli_stmt_store_result($prep5)){
                throw new UtilityException();
            }
            $count = mysqli_stmt_num_rows($prep5);
            if($count == 1) { //it is an SSN of a child!
                mysqli_stmt_free_result($prep5);
                mysqli_stmt_close($prep5);
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return SSN_OF_CHILD;
            } 
            else {
            /* Check if user already exists */
            if(!$prep = mysqli_prepare($con, "SELECT UserType FROM USER, USER_TYPE WHERE USER.SSN = USER_TYPE.SSN AND USER.SSN = ? FOR UPDATE")){
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "s", $ssn)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)){
                throw new UtilityException();
            }
            if(!mysqli_stmt_store_result($prep)){
                throw new UtilityException();
            }
            $count = mysqli_stmt_num_rows($prep);
            if($count == 0) { //new account!
                mysqli_stmt_free_result($prep);
                mysqli_stmt_close($prep);

                /* Insert account data into user table */
                if(!$prep2 = mysqli_prepare($con, "INSERT INTO `USER` (`SSN`, `Name`, `Surname`, `Email`, `Password`, `AccountActivated`) VALUES (?, ?, ?, ?, ?, ?)")){
                    throw new UtilityException();
                }
                if(!mysqli_stmt_bind_param($prep2, "sssssi", $ssn, $name, $surname, $username, $password, $accountactivated)) {
                    throw new UtilityException();
                }
                if(!mysqli_stmt_execute($prep2)) {
                    throw new UtilityException();
                }else { 
                    /* Insert account type into user_type table */
                    mysqli_stmt_close($prep2);
                    if(!$prep3 = mysqli_prepare($con, "INSERT INTO `USER_TYPE` (`SSN`, `UserType`) VALUES (?, ?)")){
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_bind_param($prep3, "ss", $ssn, $usertype)) {
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_execute($prep3)) {
                        throw new UtilityException();
                    } else { 
                        mysqli_stmt_close($prep3);
                        if(!mysqli_commit($con)){ //do the final commit
                            throw new UtilityException();
                        }
                        sendMail($username, $password); //to send real e-mail
                        mysqli_autocommit($con, TRUE);
                        mysqli_close($con);
                        return INSERT_ACCOUNT_OK;
                    } 
                }
            } 
            else { //update role for that account
                /* Get user types from user_type table and save result into local array */
                $types = array();
                mysqli_stmt_bind_result($prep, $dbUserType);
                while (mysqli_stmt_fetch($prep)) {
                    $types[] = $dbUserType;
                }
                mysqli_stmt_free_result($prep);
                mysqli_stmt_close($prep);

                /* Controls to set what are the valid userTypes for this account */
                if(count($types) == 3) {
                    mysqli_rollback($con);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return MAX_ROLES_ALLOWED;
                }
                else if(in_array($usertype, $types)) {
                    mysqli_rollback($con);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return ROLE_ALREADY_TAKEN;
                }
                else if(count($types) == 2){ //this account has already two roles.
                    if(in_array(SECRETARY_OFFICER_TYPE, $types)){
                        if(in_array(PARENT_TYPE, $types)) {
                            mysqli_rollback($con);
                            mysqli_autocommit($con, TRUE);
                            mysqli_close($con);
                            return MAX_ROLES_ALLOWED;
                        } else{
                            $validUserTypes = array(PARENT_TYPE); //we can add a parent only in this case.
                        }
                    }else if(in_array(TEACHER_TYPE, $types)){
                        if(in_array(PRINCIPAL_TYPE, $types)){
                            $validUserTypes = array(PARENT_TYPE);
                        } else {
                            $validUserTypes = array(PRINCIPAL_TYPE);
                        }
                    }else if(in_array(SYS_ADMIN_TYPE, $types)){
                        $validUserTypes = array(SECRETARY_OFFICER_TYPE);
                    }
                    else{
                        $validUserTypes = array(TEACHER_TYPE);
                    }
                }else if(count($types) == 1){
                    if($types[0] == SYS_ADMIN_TYPE){
                        $validUserTypes = array(SECRETARY_OFFICER_TYPE, PARENT_TYPE); 
                    }
                    else if($types[0] == SECRETARY_OFFICER_TYPE){
                        $validUserTypes = array(SYS_ADMIN_TYPE, PARENT_TYPE);   
                    }
                    else if($types[0] == PARENT_TYPE){
                        $validUserTypes = array(SYS_ADMIN_TYPE, PRINCIPAL_TYPE, SECRETARY_OFFICER_TYPE, TEACHER_TYPE); 
                    }
                    else if($types[0] == TEACHER_TYPE){
                        $validUserTypes = array(PRINCIPAL_TYPE, PARENT_TYPE);  
                    }
                    else if($types[0] == PRINCIPAL_TYPE){
                        $validUserTypes = array(TEACHER_TYPE, PARENT_TYPE); 
                    }
                }
            }
            
            /* Update role of this account */
            if(!in_array($usertype, $validUserTypes)) { 
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return ROLE_NOT_ALLOWED;
            } 
            else {
                /* Insert account type into user_type table */
                if(!$prep4 = mysqli_prepare($con, "INSERT INTO `USER_TYPE` (`SSN`, `UserType`) VALUES (?, ?)")){
                    throw new UtilityException();
                }
                if(!mysqli_stmt_bind_param($prep4, "ss", $ssn, $usertype)) {
                    throw new UtilityException();
                }
                if(!mysqli_stmt_execute($prep4)) {
                    throw new UtilityException();
                } else { 
                    if(!mysqli_commit($con)) {//do the final commit
                        throw new UtilityException();
                    }
                    sendMail($username, $password); //to send real e-mail
                    mysqli_stmt_close($prep4);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return UPDATE_ACCOUNT_OK;
                }
            }
        }
        } catch (UtilityException $e) {
            mysqli_rollback($con);
            mysqli_autocommit($con, TRUE);
            mysqli_close($con);
            return INSERT_ACCOUNT_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function check_inactivity () {
    if(session_status() === PHP_SESSION_NONE) {
        session_start();
    }
	$t = time();
	$diff = 0;
    $new = false;
    
	if(isset($_SESSION['time'])) {
		$t0 = $_SESSION['time'];
		$diff = ($t - $t0); 
	}
	else {
		$new = true;
	}
	if ($new || ($diff > MAX_INACTIVITY)) {
		$_SESSION = array(); //in this way I delete session variable (initializing it to a new array) but ID remains for the next session!

		if(ini_get("session.use_cookies")) { //to kill the session, delete also session cookie! (by setting it to a past expiry time)
			$params = session_get_cookie_params();
			setcookie(session_name(), '', time() - 3600*24, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);
        }
        //By using the above mechanism, the next session does NOT see the cookie, and so it will give a new ID for the session :)
        session_destroy(); 
		if ($new) { 
			header(HTTP_REDIRECT_MSG);
			header('Location: index.php');
		}
        else { //Redirect client to login page
            return -1;
		}
		exit; //IMPORTANT to avoid further output from the script
	}
	else {
        $_SESSION['time'] = time(); //Update time
	}
}

# get children given the parent
function get_children_of_parent($parentUsername, $ini_path=''){
    $con = connect_to_db($ini_path);

    $children_query = "SELECT C.SSN, C.Name, C.Surname\n" .
                      "FROM CHILD C, USER P\n" .
                      "WHERE (SSNParent1=P.SSN OR SSNParent2=P.SSN) AND P.Email=?";
    if(!$con){
        die('Error in connection to database. [Children query]'."\n");
    }
    $children_prep = mysqli_prepare($con, $children_query);
    if(!$children_prep){
        print(ERROR_QUERY_MSG.$children_query);
        die(HINT_ERROR_MSG.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($children_prep, "s", $parentUsername)){
        die('Error in binding parameters to children_prep.'."\n");
    }
    if(!mysqli_stmt_execute($children_prep)){
        die('Error in executing children query. Database error:<br>'.mysqli_error($con));
    }
    $children_res = mysqli_stmt_get_result($children_prep);
    $children_data = array();
    while($row = mysqli_fetch_array($children_res, MYSQLI_ASSOC)){
        $fields = array("SSN" => $row['SSN'], NAME => $row[NAME], SURNAME => $row[SURNAME]);
        $children_data[] = $fields;
    }
    mysqli_stmt_close($children_prep);
    return $children_data;
}
# end children of a parent

# functions to manage Marks from Parent side
function get_scores_per_child_and_date($childSSN, $startDate, $endDate, $ini_path=''){
    $con = connect_to_db($ini_path);

    $marks_query = "SELECT Name, Date, Score\n" .
                    "FROM MARK M, SUBJECT S\n" .
                    "WHERE M.SubjectID=S.ID AND StudentSSN=? AND Date>=str_to_date(?,'%Y-%m-%d') AND Date<=str_to_date(?,'%Y-%m-%d')\n" .
                    "ORDER BY Date";
    if(!$con){
        die('Error in connection to database. [Marks retrieving]'."\n");
    }
    $marks_prep = mysqli_prepare($con, $marks_query);
    if(!$marks_prep){
        print(ERROR_QUERY_MSG.$marks_query);
        die(HINT_ERROR_MSG.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($marks_prep, "sss", $childSSN, $startDate, $endDate)){
        die(ERROR_BINDING_MARK_PREP."\n");
    }
    if(!mysqli_stmt_execute($marks_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $marks_res = mysqli_stmt_get_result($marks_prep);
    $scores = array();
    while($row = mysqli_fetch_array($marks_res, MYSQLI_ASSOC)){
        $fields = array("Subject" => $row[NAME], "Date" => $row['Date'], "Score" => $row['Score']);
        $scores[] = $fields;
    }
    mysqli_stmt_close($marks_prep);
    return $scores;
}

function get_list_of_subjects($childSSN, $ini_path=''){
    $con = connect_to_db($ini_path);

    $subjects_query = "SELECT DISTINCT(Name)\n" . 
                      "FROM MARK M, SUBJECT S\n" . 
                      "WHERE M.SubjectID=S.ID AND StudentSSN=?\n" . 
                      "ORDER BY Name";
    if(!$con){
        die(ERROR_MSG_DB_CONN."\n");
    }
    $subjects_prep = mysqli_prepare($con, $subjects_query);
    if(!$subjects_prep){
        print(ERROR_QUERY_MSG.$subjects_query);
        die(HINT_ERROR_MSG.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($subjects_prep, "s", $childSSN)){
        die(ERROR_BINDING_MARK_PREP."\n");
    }
    if(!mysqli_stmt_execute($subjects_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $subjects_res = mysqli_stmt_get_result($subjects_prep);
    $subjects = array();
    while($row = mysqli_fetch_array($subjects_res, MYSQLI_ASSOC)){
        $subjects[] = $row[NAME];
    }
    mysqli_stmt_close($subjects_prep);
    return $subjects;
}
# end Marks Parent

function isInThisWeek($date) {
    ## Check if date is in this week

    $date = str_replace("/", ".", $date);
    $date = strtotime($date);
    
    $FirstDay = strtotime(SUNDAY_LAST_WK);
    $LastDay =  strtotime(SUNDAY_THIS_WK);
    
    return $date > $FirstDay && $date < $LastDay;
}

function recordTopic($class, $date, $startHour, $SubjectID, $teacherSSN, $Title, $Description, $ini_path='') {
    $FirstDay = date(CUSTOM_DATE_FORMAT, strtotime(SUNDAY_LAST_WK));
    $LastDay = date(CUSTOM_DATE_FORMAT, strtotime(SUNDAY_THIS_WK));

    if(!isInThisWeek($date) || $date === "") {
        return TOPIC_RECORDING_WRONG_DATE." Date ".$date." not valid. Please insert a date between ".$FirstDay." and ".$LastDay;
    }

    $con = connect_to_db($ini_path);
    
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO TOPIC VALUES(?, STR_TO_DATE(?,'%d/%m/%Y'), ?, ?, ?, ?, ?);")) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "ssiisss", $class, $date, $startHour, $SubjectID, $teacherSSN, $Title, $Description)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException();
            } else {
                return TOPIC_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return TOPIC_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function recordCommunication($title, $subtitle, $ini_path=''){
    if($title === "" || $subtitle === ""){
        return COMMUNICATION_RECORDING_FAILED;
    }
    $con = connect_to_db($ini_path);

    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO COMMUNICATION (Title, Description, Date) VALUES (?, ?, CURRENT_DATE);")) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "ss", $title, $subtitle)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException();
            } else {
                return COMMUNICATION_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return COMMUNICATION_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function recordMark($student, $subject, $date, $class, $score, $ini_path='') {
    $FirstDay = date(CUSTOM_DATE_FORMAT, strtotime(SUNDAY_LAST_WK));
    $LastDay = date(CUSTOM_DATE_FORMAT, strtotime(SUNDAY_THIS_WK));

    if(!isInThisWeek($date)) {
        return MARK_RECORDING_FAILED." Date ".$date." not valid. Please insert a date between ".$FirstDay." and ".$LastDay;
    }
    if($score <= 0 || $score > 10) {
        return MARK_RECORDING_FAILED." Score value not valid.";
    }

    $con = connect_to_db($ini_path);
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO MARK VALUES(?, ?, STR_TO_DATE(?,'%d/%m/%Y'), ?, ?);")) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "sissd", $student, $subject, $date, $class, $score)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException();
            } else {
                return MARK_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return MARK_RECORDING_FAILED." ".$e;
        }
    } else {
        return DB_ERROR;
    }
}

function insertStudent($SSN, $Name, $Surname, $Parent1, $Parent2, $Class, $ini_path=''){
    $con = connect_to_db($ini_path);

    if($con && mysqli_connect_error() == NULL) {
        try {
            /* Check if user already exists */
            if(!$prep2 = mysqli_prepare($con, "SELECT * FROM `USER` WHERE SSN = ? FOR UPDATE")){
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep2, "s", $SSN)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep2)){
                throw new UtilityException();
            }
            if(!mysqli_stmt_store_result($prep2)){
                throw new UtilityException();
            }
            $count = mysqli_stmt_num_rows($prep2);
            mysqli_stmt_free_result($prep2);
            mysqli_stmt_close($prep2);
            if($count == 1) {
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return USER_ALREADY_EXIST;
            } else {
                /* Insert student into db */
                if(!$prep = mysqli_prepare($con, "INSERT INTO CHILD VALUES(?, ?, ?, ?, ?, ?);")) {
                    throw new UtilityException();
                }
                if(!mysqli_stmt_bind_param($prep, "ssssss", $SSN, $Name, $Surname, $Parent1, $Parent2, $Class)) {
                    throw new UtilityException();
                }
                if(!mysqli_stmt_execute($prep)) {
                    throw new UtilityException();
                }
                else{
                    return STUDENT_RECORDING_OK;
                }
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return "Student already exists.";
        }
    } else {
        return DB_ERROR;
    }
}

function get_attendance($childSSN, $ini_path=''){
    $con = connect_to_db($ini_path);

    $attendance_query = "SELECT StudentSSN, Date, Presence, ExitHour\n" . 
                      "FROM ATTENDANCE\n" . 
                      "WHERE StudentSSN=?\n";             
    if(!$con){
        die(ERROR_MSG_DB_CONN."\n");
    }
    $attendance_prep = mysqli_prepare($con, $attendance_query);
    if(!$attendance_prep){
        print(ERROR_QUERY_MSG.$attendance_query);
        die(HINT_ERROR_MSG.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($attendance_prep, "s", $childSSN)){
        die(ERROR_BINDING_MARK_PREP."\n");
    }
    if(!mysqli_stmt_execute($attendance_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $attendance_res = mysqli_stmt_get_result($attendance_prep);
    $attendance = array();
    while($row = mysqli_fetch_array($attendance_res, MYSQLI_ASSOC)){
        $attendance[] = $row;
    }
    mysqli_stmt_close($attendance_prep);
    return $attendance;
}

### Presence report by a teacher
# retrieve classes of a teacher
function get_classes_of_teacher($teacherUsername, $ini_path=''){
    $class_query = "SELECT DISTINCT Class\n" .
                   "FROM TEACHER_SUBJECT T, USER U\n" .
                   "WHERE T.TeacherSSN=U.SSN AND U.Email=?";

    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Classes of teacher]'."\n");
    }
    $classes_prep = mysqli_prepare($db_con, $class_query);
    if(!$classes_prep){
        print(ERROR_QUERY_MSG.$class_query);
        die(HINT_ERROR_MSG.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($classes_prep, "s", $teacherUsername)){
        die('Error in binding paramters to classes_prep.'."\n");
    }
    if(!mysqli_stmt_execute($classes_prep)){
        die('Error in executing classes query. Database error:<br>'.mysqli_error($db_con));
    }
    $classes_res = mysqli_stmt_get_result($classes_prep);
    $classes = array();
    while($row = mysqli_fetch_array($classes_res, MYSQLI_ASSOC)){
        $classes[] = array(CLASS_SCHOOL => $row[CLASS_SCHOOL]);
    }
    mysqli_stmt_close($classes_prep);
    return $classes;
}

# retrieve student of a class
function get_students_of_class($class, $ini_path=''){
    $student_class_query = "SELECT SSN, Name, Surname\n" .
                           "FROM CHILD\n" .
                           "WHERE Class=?";

    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Students in class]'."\n");
    }
    $student_class_prep = mysqli_prepare($db_con, $student_class_query);
    if(!$student_class_prep){
        print(ERROR_QUERY_MSG.$student_class_query);
        die(HINT_ERROR_MSG.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($student_class_prep, "s", $class)){
        die('Error in binding parameters to student_class_prep.'."\n");
    }
    if(!mysqli_stmt_execute($student_class_prep)){
        die('Error in executing students per class query. Database error:<br>'.mysqli_error($db_con));
    }
    $student_class_res = mysqli_stmt_get_result($student_class_prep);
    $students = array();
    while($row = mysqli_fetch_array($student_class_res, MYSQLI_ASSOC)){
        $fields = array("SSN" => $row['SSN'], NAME => $row[NAME], SURNAME => $row[SURNAME]);
        $students[] = $fields;
    }
    mysqli_stmt_close($student_class_prep);
    return $students;
}

# retrieve presence and early exit of students of a class per date
function get_list_presences_class_per_date($class, $date, $ini_path=''){
    $query_presences = "SELECT A.StudentSSN, Presence, ExitHour\n" .
                       "FROM ATTENDANCE A, CHILD C\n" .
                       "WHERE A.StudentSSN=C.SSN AND C.Class=? AND A.Date=STR_TO_DATE(?,'%d/%m/%Y')";

    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Presences of students in class].'."\n");
    }
    $presences_class_prep = mysqli_prepare($db_con, $query_presences);
    if(!$presences_class_prep){
        print(ERROR_QUERY_MSG.$query_presences);
        die(HINT_ERROR_MSG.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($presences_class_prep, "ss", $class, $date)){
        die('Error in binding parameters to presences_class_prep.'."\n");
    }
    if(!mysqli_stmt_execute($presences_class_prep)){
        die('Error in executing presences per class query. Database error:<br>'.mysqli_error($db_con));
    }
    $presences_class_res = mysqli_stmt_get_result($presences_class_prep);
    $presences = array();
    while($row = mysqli_fetch_array($presences_class_res, MYSQLI_ASSOC)){
        $fields = array("SSN" => $row['StudentSSN'], "Presence" => $row['Presence'], "ExitHour" => $row['ExitHour']);
        $presences[] = $fields;
    }
    mysqli_stmt_close($presences_class_prep);
    return $presences;
}

# update early exit of children
function register_early_exit($childSSN, $today_date, $hour_leaving, $ini_path=''){
    $leaving_query = "INSERT INTO ATTENDANCE(StudentSSN, Date, ExitHour) VALUES(?,?,?) ON DUPLICATE KEY UPDATE ExitHour=?";
    if(empty($childSSN) || empty($today_date) || empty($hour_leaving)){
        return "Parameter missing.";
    }
    if($today_date !== date('Y-m-d')){
        return "Cannot register early exits on a different day than today.";
    }
    if($hour_leaving <= 0 || $hour_leaving >= 6){
        return "Exit hour must be between 1 and 5 included.";
    }
    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        return 'Error in connecting to database. [Register early exits]'."\n";
    }
    $leaving_prep = mysqli_prepare($db_con, $leaving_query);
    if(!$leaving_prep){
        print('Error in preparting query '.$leaving_query);
        return HINT_ERROR_MSG.mysqli_error($db_con);
    }
    if(!mysqli_stmt_bind_param($leaving_prep, "ssii", $childSSN, $today_date, $hour_leaving, $hour_leaving)){
        return 'Error in binding parameters to leaving_prep.'."\n";
    }
    if(!mysqli_stmt_execute($leaving_prep)){
        return 'Error in executing early exit query. Database error:<br>'.mysqli_error($db_con);
    }
    mysqli_stmt_close($leaving_prep);
    return true;
}
### END Presence report by a teacher

### Assignments query
# Parent: retrieve assignment of his child
function get_assignment_of_child($childSSN, $ini_path=''){
    $assignments_query = "SELECT S.Name, A.DateOfAssignment, A.DeadlineDate, A.Title, A.Description, A.Attachment\n" . 
                         "FROM ASSIGNMENT A, CHILD C, SUBJECT S\n" . 
                         "WHERE A.SubjectID = S.ID AND A.Class=C.Class AND C.SSN=?";
    if(empty($childSSN)){
        return "Child SSN cannot be empty.";
    }
    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        return 'Error in connecting to the database. [Assignments of child]\n';
    }
    $assignments_prep = mysqli_prepare($db_con, $assignments_query);
    if(!$assignments_prep){
        print(ERROR_QUERY_MSG.$assignments_query);
        return HINT_ERROR_MSG.mysqli_error($db_con);
    }
    if(!mysqli_stmt_bind_param($assignments_prep, "s", $childSSN)){
        return 'Error in binding parameters to assignments_prep.'."\n";
    }
    if(!mysqli_stmt_execute($assignments_prep)){
        return 'Error in executing assignments query. Database error:<br>'.mysqli_error($db_con);
    }
    $assignments_res = mysqli_stmt_get_result($assignments_prep);
    $assignments = array();
    while($row = mysqli_fetch_array($assignments_res, MYSQLI_ASSOC)){
        $fields = array("Subject" => $row[NAME], "Date" => $row['DateOfAssignment'], "Deadline" => $row['DeadlineDate'], TITLE => $row[TITLE], DESCRIPTION => $row[DESCRIPTION], "Attachment" => $row['Attachment']);
        $assignments[] = $fields;
    }
    mysqli_stmt_close($assignments_prep);
    return $assignments;
}
### END assignment (parent) section

function get_communications($ini_path='') {
    $query = "SELECT id, Title, Description, Date FROM COMMUNICATION ORDER BY Date DESC LIMIT 3";
    $db_con = connect_to_db($ini_path);
    if(!$db_con) {
        return DB_ERROR;
    }
    $prep = mysqli_prepare($db_con, $query);
    if(!$prep) {
        return GET_COMMUNICATIONS_FAILED;
    }
    if(!mysqli_stmt_execute($prep)) {
        return GET_COMMUNICATIONS_FAILED;
    }
    $res = mysqli_stmt_get_result($prep);
    $communications = array();
    while($row = mysqli_fetch_array($res, MYSQLI_ASSOC)) {
        $fields = array("id" => $row['id'], TITLE => $row[TITLE], DESCRIPTION => $row[DESCRIPTION], "Date" => $row['Date']);
        $communications[] = $fields;
    }
    mysqli_stmt_close($prep);
    return $communications;
}

// generic debugging function
function console_log( $data ){
    echo '<script>';
    echo 'console.log('. json_encode( $data ) .')';
    echo '</script>';
}

# save in the database the timetable received from csv
function insert_timetable($class, $timetable, $ini_path=''){
    $con = connect_to_db($ini_path);

    if($con && mysqli_connect_error() == NULL) {
        $days_of_week = array(
            'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
        );
        try {
            mysqli_autocommit($con, false);

            $start_hour = 1;
            foreach ($timetable as $row) {
                $day_counter = 0;
                foreach($row as $subject) {                      
                    // select subject id starting from subject name
                    if(!$prep = mysqli_prepare($con, "SELECT ID FROM SUBJECT WHERE Name=? LIMIT 1;")){
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_bind_param($prep, "s", $subject)) {
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_execute($prep)) {
                        throw new UtilityException();
                    }
                    $result = mysqli_stmt_get_result($prep);
                    $subject_id = mysqli_fetch_assoc($result)["ID"];
                    mysqli_stmt_free_result($prep);
                    mysqli_stmt_close($prep);

                    if ($subject_id === NULL && $subject !== "-"){
                        return SUBJECT_INCORRECT;
                    }

                    if(!$prep = mysqli_prepare($con, "INSERT INTO CLASS_TIMETABLE(Class, DayOfWeek, Hour, SubjectID) 
                                                        VALUES(?, ?, ?, ?) 
                                                        ON DUPLICATE KEY UPDATE SubjectID=?;")) {

                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_bind_param($prep, "ssiii", $class, $days_of_week[$day_counter], $start_hour, $subject_id, $subject_id)) {
                        throw new UtilityException();
                    }
                    if(!mysqli_stmt_execute($prep)) {
                        throw new UtilityException();
                    }
                    mysqli_stmt_free_result($prep);
                    mysqli_stmt_close($prep);
                    $day_counter++;
                }  
                $start_hour++;      
            }
            mysqli_commit($con);
        } catch (Exception $e) {
            console_log(mysqli_error($con));
            mysqli_rollback($con);
            return DB_QUERY_ERROR;
        }
        mysqli_close($con);
    } else {
        return DB_ERROR;
    }
    return PUBLISH_TIMETABLE_OK;
}

function get_list_of_classes($ini_path='') {
    $con = connect_to_db($ini_path);

    $classes_query = "SELECT DISTINCT(Name) FROM CLASS ORDER BY Name;";
    if(!$con){
        die(ERROR_MSG_DB_CONN."\n");
    }
    $classes_prep = mysqli_prepare($con, $classes_query);
    if(!$classes_prep){
        print(ERROR_QUERY_MSG.$classes_query);
        die(HINT_ERROR_MSG.mysqli_error($con));
    }
    if(!mysqli_stmt_execute($classes_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $classes_res = mysqli_stmt_get_result($classes_prep);
    $classes = array();
    while($row = mysqli_fetch_array($classes_res, MYSQLI_ASSOC)){
        $classes[] = $row['Name'];
    }
    mysqli_stmt_close($classes_prep);
    return $classes;
}

function recordAssignment($class, $subject, $date, $title, $description, $attachment, $ini_path=''){        
    $con = connect_to_db($ini_path);
    $today = date('Y-m-d');
    if($date <= $today){
        return ASSIGNMENT_RECORDING_FAILED;
    }

    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO ASSIGNMENT(Class, SubjectID, DateOfAssignment, DeadlineDate, Title, Description, Attachment) VALUES (?, ?, CURRENT_DATE, ?, ?, ?, ?);")){
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "ssssss", $class, $subject, $date, $title, $description, $attachment)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException();
            }
            else{
                return ASSIGNMENT_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return ASSIGNMENT_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}


function uploadSupportMaterialFile($class, $subjectID, $userfile_tmp, $userfile_name, $file_size, $ini_path=''){    

        //Limit max dimension file (20MB)
        if ($file_size > 20971520) {
            return 'File size is higher than 20MB.';
        }

        //check valid extension
        $ext_ok = array('doc', 'docx', 'pdf', 'ppt', 'pptx', 'txt');
        $temp = explode('.', $userfile_name);
        $ext = end($temp);
        if (!in_array($ext, $ext_ok)) {
            return 'File extension not supported.';    
        }          

        //create the directory if not exists
        if (!file_exists('../support_material')) {
            mkdir('../support_material', 0777, true);
        }       
        //path to save files
        $uploaddir = '../support_material/';  

        //needed for unit test, to find the correct path to connect to db
        $db_con = connect_to_db($ini_path);

        try {  
            mysqli_autocommit($db_con, false);
            //table support_material locked
            //check if filename for specific class and subjectId already exists
            if(!$result = mysqli_query($db_con, 'SELECT COUNT(*) as cnt FROM SUPPORT_MATERIAL WHERE SubjectID='.$subjectID.' AND Class="'.$class.'" AND Filename="'.$userfile_name.'" FOR UPDATE;')){
                throw new UtilityException();            
            }
            
            $row = mysqli_fetch_array($result); 
            $cnt = $row['cnt'];
            if($cnt>0){
                throw new UtilityException('File already exists, please select another one.'); 
            }
            if(!$result = mysqli_query($db_con, 'INSERT INTO SUPPORT_MATERIAL(SubjectID, Class, Date, Filename) VALUES("'.$subjectID.'","'.$class.'", CURRENT_DATE,"'.$userfile_name.'");')){
                throw new UtilityException(HINT_RETRY);
            }
            
            if(!$result = mysqli_query($db_con, 'SELECT LAST_INSERT_ID() as id;')){
                throw new UtilityException(HINT_RETRY);
            }
            
            $row = mysqli_fetch_array($result); 
            $fileid = $row['id'];

            //Move file to the final directory
            if (move_uploaded_file($userfile_tmp, $uploaddir.$fileid)) {
                mysqli_autocommit($db_con, true);
                mysqli_close($db_con);            
                return  'File correctly uploaded.';
            } else{   
                throw new UtilityException(HINT_RETRY);                
            }  

        } catch (Exception $e) {         
            $msg =$e->getMessage();
            mysqli_rollback($db_con);
            mysqli_autocommit($db_con, true);
            mysqli_close($db_con);
            return $msg; 
        }        
}

// return list of notes ordered by date (most recent ones first)
function get_list_of_student_notes($studentSSN, $ini_path='') {
    $con = connect_to_db($ini_path);

    $notes_query = "SELECT Name AS 'SubjectName', Description, Date\n" . 
                      "FROM NOTE N, SUBJECT S\n" . 
                      "WHERE N.SubjectID=S.ID AND StudentSSN=?\n" . 
                      "ORDER BY Date DESC";
    if(!$con){
        die(ERROR_MSG_DB_CONN."\n");
    }
    $notes_prep = mysqli_prepare($con, $notes_query);
    if(!$notes_prep){
        print(ERROR_QUERY_MSG.$notes_query);
        die(HINT_ERROR_MSG.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($notes_prep, "s", $studentSSN)){
        die(ERROR_BINDING_MARK_PREP."\n");
    }
    if(!mysqli_stmt_execute($notes_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $notes_res = mysqli_stmt_get_result($notes_prep);
    $notes = array();
    while($row = mysqli_fetch_array($notes_res, MYSQLI_ASSOC)){
        $notes[] = $row;
    }
    mysqli_stmt_close($notes_prep);
    return $notes;
}

// return list of support material of a child
function get_list_of_support_material($studentSSN, $ini_path='') {
    $db_con = connect_to_db($ini_path);

    $studentSSN = mySanitizeString($studentSSN);
    try {  
        if(!$result = mysqli_query($db_con, 'SELECT S.ID as "Id", SJ.Name as "Subject", S.Date as "Date", S.Filename as "Filename"  FROM SUPPORT_MATERIAL S, SUBJECT SJ, CHILD C 
                WHERE C.Class = S.Class AND
                      SJ.ID = S.SubjectID AND
                      C.SSN="'.$studentSSN.'" ORDER BY S.Date;')){
            throw new UtilityException();
        }            
               
        $files = mysqli_fetch_all($result, MYSQLI_ASSOC);
        mysqli_close($db_con);
        return $files;
    } catch (Exception $e) { 
        $msg =$e->getMessage();        
        mysqli_close($db_con);
        die($msg.mysqli_error($db_con));        
    }   
}
// return file infos from db
function get_file($id, $ini_path='') {
    $db_con = connect_to_db($ini_path);    
    $id = mySanitizeString($id);
    
    // fetch file to download from database
    $sql = "SELECT * FROM SUPPORT_MATERIAL WHERE ID=$id";
    $result = mysqli_query($db_con, $sql);

    $file = mysqli_fetch_assoc($result);  
    mysqli_close($db_con);     
    return $file; 
}

function recordNote($student, $subject, $date, $description, $ini_path='') {
    
    if($description == NULL){
        return NOTE_RECORDING_FAILED;
    }
    $con = connect_to_db($ini_path);

    if($con && mysqli_connect_error() == NULL) {
        try {
            // INSERT INTO `NOTE`(`StudentSSN`, `SubjectID`, `Description`, `Date`) VALUES ([value-1],[value-2],[value-3],[value-4])
            if(!$prep = mysqli_prepare($con, "INSERT INTO NOTE VALUES(?, ?, ?, STR_TO_DATE(?,'%d/%m/%Y'));")) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_bind_param($prep, "ssss", $student, $subject, $description, $date)) {
                throw new UtilityException();
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException();
            } else {
                return NOTE_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return NOTE_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function https_redirect() { 
    session_start();

    if (empty($_SERVER['HTTPS']) || $_SERVER['HTTPS'] === 'off') {
        $location = 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
        if (ctype_alnum($location)) {
            header('HTTP/1.1 301 Moved Permanently');
            header(LOCATION_LABEL.$location);
            exit;
        }  
    }
    
    if (isset($_SESSION['time'])) {
        $diff = time() - $_SESSION['time'];
        if ($diff > MAX_INACTIVITY) {
            $_SESSION=array();
            if (session_id() != "" || isset($_COOKIE[session_name()])){
                setcookie(session_name(), '', time()-2592000, '/');
            }
            session_destroy();

            header(HTTP_REDIRECT_MSG);
            header('Location: login.php');
            die();
        }
    }
}

function isCoordinator($user, $ini_path=''){
    $db_con = connect_to_db($ini_path);    
    $user = mySanitizeString($user);

    // Check on db
    $sql = "SELECT COUNT(*) AS total FROM CLASS, USER WHERE Coordinator = USER.SSN AND USER.Email = '$user';";

    $result = mysqli_query($db_con, $sql);
    
    $row = mysqli_fetch_array($result); 
    $count = $row['total'];

    mysqli_close($db_con);     

    return $count >= 1;
}

function getCoordinatorSubject($teacher, $ini_path=''){
    $db_con = connect_to_db($ini_path);


    $query = "SELECT CLASS.Name as Class, SUBJECT.Name, SUBJECT.ID, USER.SSN FROM USER, SUBJECT, CLASS WHERE USER.Email = ? AND USER.SSN = CLASS.Coordinator";

    if(!$db_con){
        echo '{"state" : "error",
        "result" : "Error in connection to database." }';
    }

    $prep_query = mysqli_prepare($db_con, $query);
    if(!$prep_query){
        print(ERROR_QUERY_MSG.$prep_query);
        echo '{"state" : "error",
        "result" : "Database error." }';
    }
    if(!mysqli_stmt_bind_param($prep_query, "s", $teacher)){
        echo '{"state" : "error",
        "result" : "Param binding error." }';
    }
    if(!mysqli_stmt_execute($prep_query)){
        echo '{"state" : "error",
        "result" : "Database error (Query execution)." }';
    }

    mysqli_stmt_bind_result($prep_query, $Class, $Name, $ID, $SSN);

    $subjects = array();

    while (mysqli_stmt_fetch($prep_query)) {
        $fields = array(CLASS_SCHOOL => $Class, NAME => $Name, "ID" => $ID, "SSN" => $SSN);
        $subjects[] = $fields;

    }

    mysqli_stmt_close($prep_query);

    return $subjects;
}

function recordFinalMark($student, $subjectID, $score, $ini_path=''){
    if($score < 1 || $score > 10){
        return MARK_RECORDING_FAILED;
    }

    $con = connect_to_db($ini_path);
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO FINAL_MARK VALUES(?, ?, ?) ON DUPLICATE KEY UPDATE Mark = ?;")) {
                throw new UtilityException("Error in prepare");
            }
            if(!mysqli_stmt_bind_param($prep, "siii", $student, $subjectID, $score, $score)) {
                throw new UtilityException("Error in bind");
            }
            if(!mysqli_stmt_execute($prep)) {
                throw new UtilityException("Error in execute");
            } else{
                return MARK_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return MARK_RECORDING_FAILED." ".$e;
        }
    } else {
        return DB_ERROR;
    }
}
?>