<?php
//include("send_mail.php");//need the /vendor/autoload.php file generated by composer

define("LOGIN_TEACHER_OK", "Login Teacher success.");
define("LOGIN_PARENT_OK", "Login Parent success.");
define("LOGIN_SECRETARY_OK", "Login Secretary Officer success.");
define("LOGIN_PRINCIPAL_OK", "Login Principal success.");
define("LOGIN_ADMIN_OK", "Login Admin success.");
define("LOGIN_USER_NOT_DEFINED", "User not defined.");
define("LOGIN_FAILED", "Login failed.");
define("USER_ALREADY_EXIST", "SSN already exists.");
define("INSERT_PARENT_OK", "Parent inserted successfully.");
define("INSERT_PARENT_FAILED", "Insert Parent failed.");
define("INSERT_ACCOUNT_OK", "Account inserted successfully.");
define("UPDATE_ACCOUNT_OK", "Account updated successfully.");
define("INSERT_ACCOUNT_FAILED", "Insert Account failed.");
define("CHANGE_PASSWORD", "Password entered needs to be changed");
define("DB_ERROR", "Error on db connection.");
define("DB_QUERY_ERROR", "Error on query db.");
define("PASSWORD_INCORRECT", "Password entered is incorrect.");
define("EMAIL_INCORRECT", "Email entered is incorrect.");
define("SSN_INCORRECT", "SSN entered is incorrect.");
define("NAME_INCORRECT", "Name entered is incorrect.");
define("SURNAME_INCORRECT", "Surname entered is incorrect.");
define("USERTYPE_INCORRECT", "User type not recognized.");
define("LOGIN_NOT_MATCH", "Invalid username or password.");
define("SESSION_EXPIRED", "session-expired");
define("TOPIC_RECORDING_FAILED", "Topic recording failed.");
define("TOPIC_RECORDING_OK", "Topics correctly recorded.");
define("TOPIC_RECORDING_INCORRECT", "Please fill all the fields.");
define("MARK_RECORDING_OK", "Mark correctly recorded.");
define("MARK_RECORDING_FAILED", "Mark recording failed.");
define("STUDENT_RECORDING_OK", "Student correctly recorded.");
define("STUDENT_RECORDING_FAILED", "Student recording failed.");
define("MAX_ROLES_ALLOWED", "The account cannot take other roles.");
define("ROLE_ALREADY_TAKEN", "The account has already this role.");
define("ROLE_NOT_ALLOWED", "The account cannot take this role.");
define("SSN_OF_CHILD", "The SSN inserted is that of a child.");
define("STUDENT_ABSENT", "The selected student is absent.");
define("MAX_INACTIVITY", 99999999);
define("DEFAULT_PASSWORD_LENGTH", 8);

function connect_to_db($ini_path_test='') {
    // $ini_path = $_SERVER['DOCUMENT_ROOT'] . '/Electronic-Student-Record-Management-System/config/database/database.ini';
    $ini_path = '../config/database/database.ini';

    if ($ini_path_test !== '')
        $ini_path = $ini_path_test;
    $db = parse_ini_file($ini_path);

    $user = $db['user'];
    $pass = $db['pass'];
    $name = $db['name'];
    $host = $db['host'];

    $conn = mysqli_connect($host, $user, $pass, $name); //returns FALSE on error
    if($conn){
        $conn->set_charset("utf8");
    }
    return $conn;
}

function myDestroySession() {
    $_SESSION = array();
    if(ini_get("session.use_cookies")) {
        $params = session_get_cookie_params();
        setcookie(session_name(), '', time()-3600*24, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);
    }
    session_destroy();
}

function userLoggedIn() {
    if(isset($_SESSION['mySession']))
        return $_SESSION['mySession'];
    else 
        return false;
}

function userTypeLoggedIn($type) {
    if(isset($_SESSION['myUserType']) && $_SESSION['myUserType'] == $type) 
        return $_SESSION['myUserType'];
    else 
        return false;
}

function myRedirectHome($msg="") {
    header('HTTP/1.1 307 temporary redirect');
    header("Location: index.php?msg=".urlencode($msg));
    exit;
}

function myRedirectTo($toRedirect, $msg="") {
    header('HTTP/1.1 307 temporary redirect');
    header('Location: '.$toRedirect.'?msg='.urlencode($msg));
    exit;
}

function redirect($msg='', $new_location){
    if(!empty($msg)){
        $_SESSION['msg_result'] = $msg;
    }    
    header("HTTP/1.1 303 See Other");
    header('Location: '.$new_location);
    exit;
}

function myRedirectToHTTPS($toRedirect) {
    header('HTTP/1.1 301 Moved Permanently');
    header('Location: '.$toRedirect);
}

function checkPassword($pwd) {
    return strlen($pwd) >= 2 && preg_match("#[a-z]+#", $pwd) && (preg_match("#[0-9]+#", $pwd) || preg_match("#[A-Z]+#", $pwd));
}

function checkEmail($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL);
}

function checkSSN($ssn) {
    if($ssn == '' || strlen($ssn) != 16)
        return false;
    $ssn = strtoupper($ssn);
    return preg_match("/[A-Z0-9]+$/", $ssn);
}

function checkNormalText($input) {
    return strlen($input) >= 2 && strlen($input) < 20;
}

function checkUserType($type) {
    return $type === 'TEACHER' || $type === 'SECRETARY_OFFICER' || $type === 'PARENT' 
        || $type === 'PRINCIPAL' || $type === 'SYS_ADMIN';
}

function generatePass() {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; 
    $randomString = ''; 
  
    for ($i = 0; $i < DEFAULT_PASSWORD_LENGTH; $i++) { 
        $index = rand(0, strlen($characters) - 1); 
        $randomString .= $characters[$index]; 
    } 
  
    return $randomString; 
}

function mySanitizeString($var) {
	$var = strip_tags($var); //remove all HTML and PHP tag, and also NULL characters
    $var = htmlentities($var); //convert all special characters in HTML entities
    if(get_magic_quotes_gpc()) 
        $var = stripslashes($var); //remove backslashes
    return $var;
}

### functions to login and retrieve roles
# retrieve roles of a single user
function get_roles_per_user($username, $ini_path=''){
    $roles_query = "SELECT UserType\n" .
                   "FROM USER_TYPE UT, USER U\n" .
                   "WHERE UT.SSN=U.SSN AND U.Email=?";
    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Roles query]'."\n");
    }
    $roles_prep = mysqli_prepare($db_con, $roles_query);
    if(!$roles_prep){
        print('Error in preparing query: '.$roles_query);
        die("Check database error:<br>".mysqi_error($db_con));
    }
    if(!mysqli_stmt_bind_param($roles_prep, "s", $username)){
        die('Error in binding parameters for roles_prep.'."\n");
    }
    if(!mysqli_stmt_execute($roles_prep)){
        die('Error in executing roles query. Check database error:<br>'.mysqli_error($db_con));
    }
    $roles_res = mysqli_stmt_get_result($roles_prep);
    $roles = array();
    while($row = mysqli_fetch_array($roles_res, MYSQLI_ASSOC)){
        $roles[] = $row['UserType'];
    }
    mysqli_stmt_close($roles_prep);
    return $roles;
}

# login -> only credentials check
function tryLogin($username, $password, $ini_path='') {
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "SELECT Password, AccountActivated FROM `USER` WHERE Email = ?")) 
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep, "s", $username)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep)) 
                throw new Exception();
            if(!mysqli_stmt_bind_result($prep, $dbPass, $isActive))
                throw new Exception();  
            if(!mysqli_stmt_store_result($prep))
                throw new Exception();

            $count = mysqli_stmt_num_rows($prep);
            if($count == 0) { //email not found in db
                mysqli_stmt_close($prep);
                mysqli_close($con);
                return LOGIN_NOT_MATCH;
            } else {
                if(!mysqli_stmt_fetch($prep))
                    throw new Exception(); 
                if($password == $dbPass && $isActive == 1) { 
                    mysqli_stmt_close($prep);
                    mysqli_close($con);
                    $dbUserType = get_roles_per_user($username)[0];
                    if($dbUserType == 'TEACHER')
                        return LOGIN_TEACHER_OK;
                    else if($dbUserType == 'PARENT')
                        return LOGIN_PARENT_OK;
                    else if($dbUserType == 'SECRETARY_OFFICER')
                        return LOGIN_SECRETARY_OK;
                    else if($dbUserType == 'PRINCIPAL')
                        return LOGIN_PRINCIPAL_OK;
                    else if($dbUserType == 'SYS_ADMIN')
                        return LOGIN_ADMIN_OK;
                    else 
                        return LOGIN_USER_NOT_DEFINED;
                } else if($password == $dbPass && $isActive == 0) { //password needs to be changed
                    mysqli_stmt_close($prep);
                    mysqli_close($con);
                    return CHANGE_PASSWORD;
                } else { //password not correct 
                    mysqli_stmt_close($prep);
                    mysqli_close($con);
                    return LOGIN_NOT_MATCH;
                }
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return LOGIN_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function check_change_role($username, $role, $ini_path=''){
    $roles_query = "SELECT UserType\n" .
                   "FROM USER_TYPE UT, USER U\n" .
                   "WHERE UT.SSN=U.SSN AND U.Email=?";
    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Roles query]'."\n");
    }
    $roles_prep = mysqli_prepare($db_con, $roles_query);
    if(!$roles_prep){
        print('Error in preparing query: '.$roles_query);
        die("Check database error:<br>".mysqi_error($db_con));
    }
    if(!mysqli_stmt_bind_param($roles_prep, "s", $username)){
        die('Error in binding parameters for roles_prep.'."\n");
    }
    if(!mysqli_stmt_execute($roles_prep)){
        die('Error in executing roles query. Check database error:<br>'.mysqli_error($db_con));
    }
    $roles_res = mysqli_stmt_get_result($roles_prep);
    $role_ok = false;
    while($row = mysqli_fetch_array($roles_res, MYSQLI_ASSOC)){
        if($row['UserType'] === $role){
            $role_ok = true;
        }
    }
    mysqli_stmt_close($roles_prep);
    return $role_ok;
}
### END functions to login and retrieve roles

function tryInsertParent($ssn, $name, $surname, $username, $password, $usertype, $accountactivated, $ini_path='') {
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();
    if($con && mysqli_connect_error() == NULL) {
        mysqli_autocommit($con, FALSE);
        try {
            /* Check if user already exists */
            if(!$prep = mysqli_prepare($con, "SELECT * FROM `USER` WHERE SSN = ? FOR UPDATE"))
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep, "s", $ssn)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep))
                throw new Exception();
            if(!mysqli_stmt_store_result($prep))
                throw new Exception();
            $count = mysqli_stmt_num_rows($prep);
            mysqli_stmt_free_result($prep);
            mysqli_stmt_close($prep);
            if($count == 1) {
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return USER_ALREADY_EXIST;
            } 
            else {
                /* Insert parent data into db */
                if(!$prep2 = mysqli_prepare($con, "INSERT INTO `USER` (`SSN`, `Name`, `Surname`, `Email`, `Password`, `AccountActivated`) VALUES (?, ?, ?, ?, ?, ?)"))
                    throw new Exception();
                if(!mysqli_stmt_bind_param($prep2, "sssssi", $ssn, $name, $surname, $username, $password, $accountactivated)) 
                    throw new Exception();
                if(!mysqli_stmt_execute($prep2)) 
                    throw new Exception();
                else { 
                    mysqli_stmt_close($prep2);
                    /* Insert parent data into db */
                    if(!$prep3 = mysqli_prepare($con, "INSERT INTO `USER_TYPE` (`SSN`, `UserType`) VALUES (?, ?)"))
                        throw new Exception();
                    if(!mysqli_stmt_bind_param($prep3, "ss", $ssn, $usertype)) 
                        throw new Exception();
                    if(!mysqli_stmt_execute($prep3)) 
                        throw new Exception();
                    else {
                        mysqli_stmt_close($prep3);
                        if(!mysqli_commit($con)) // do the final commit
                            throw new Exception();
                        //sendMail($username, $password);//to send real e-mail
                        mysqli_autocommit($con, TRUE);
                        mysqli_close($con);
                        return INSERT_PARENT_OK;
                    }
                }
            }
        } catch (Exception $e) {
            mysqli_rollback($con);
            mysqli_autocommit($con, TRUE);
            mysqli_close($con);
            return INSERT_PARENT_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function tryInsertAccount($ssn, $name, $surname, $username, $password, $usertype, $accountactivated, $ini_path='') {
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();
    if($con && mysqli_connect_error() == NULL) {
        mysqli_autocommit($con, FALSE);
        try {
            /* Check if is an SSN of one child -> error */
            if(!$prep5 = mysqli_prepare($con, "SELECT * FROM CHILD WHERE SSN = ? LIMIT 1"))
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep5, "s", $ssn)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep5))
                throw new Exception();
            if(!mysqli_stmt_store_result($prep5))
                throw new Exception();
            $count = mysqli_stmt_num_rows($prep5);
            if($count == 1) { //it is an SSN of a child!
                mysqli_stmt_free_result($prep5);
                mysqli_stmt_close($prep5);
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return SSN_OF_CHILD;
            } 
            else {
            /* Check if user already exists */
            if(!$prep = mysqli_prepare($con, "SELECT UserType FROM USER, USER_TYPE WHERE USER.SSN = USER_TYPE.SSN AND USER.SSN = ? FOR UPDATE"))
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep, "s", $ssn)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep))
                throw new Exception();
            if(!mysqli_stmt_store_result($prep))
                throw new Exception();
            $count = mysqli_stmt_num_rows($prep);
            if($count == 0) { //new account!
                mysqli_stmt_free_result($prep);
                mysqli_stmt_close($prep);
                //$validUserTypes = array("TEACHER", "PARENT", "SECRETARY_OFFICER", "PRINCIPAL", "SYS_ADMIN");

                /* Insert account data into user table */
                if(!$prep2 = mysqli_prepare($con, "INSERT INTO `USER` (`SSN`, `Name`, `Surname`, `Email`, `Password`, `AccountActivated`) VALUES (?, ?, ?, ?, ?, ?)"))
                    throw new Exception();
                if(!mysqli_stmt_bind_param($prep2, "sssssi", $ssn, $name, $surname, $username, $password, $accountactivated)) 
                    throw new Exception();
                if(!mysqli_stmt_execute($prep2)) 
                    throw new Exception();
                else { 
                    /* Insert account type into user_type table */
                    mysqli_stmt_close($prep2);
                    if(!$prep3 = mysqli_prepare($con, "INSERT INTO `USER_TYPE` (`SSN`, `UserType`) VALUES (?, ?)"))
                        throw new Exception();
                    if(!mysqli_stmt_bind_param($prep3, "ss", $ssn, $usertype)) 
                        throw new Exception();
                    if(!mysqli_stmt_execute($prep3)) 
                        throw new Exception();
                    else { 
                        mysqli_stmt_close($prep3);
                        if(!mysqli_commit($con)) //do the final commit
                            throw new Exception();
                        //sendMail($username, $password); //to send real e-mail
                        mysqli_autocommit($con, TRUE);
                        mysqli_close($con);
                        return INSERT_ACCOUNT_OK;
                    } 
                }
            } 
            else { //update role for that account
                /* Get user types from user_type table and save result into local array */
                $types = array();
                mysqli_stmt_bind_result($prep, $dbUserType);
                while (mysqli_stmt_fetch($prep)) 
                    $types[] = $dbUserType;
                mysqli_stmt_free_result($prep);
                mysqli_stmt_close($prep);

                /* Controls to set what are the valid userTypes for this account */
                if(count($types) == 3) {
                    mysqli_rollback($con);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return MAX_ROLES_ALLOWED;
                }
                else if(in_array($usertype, $types)) {
                    mysqli_rollback($con);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return ROLE_ALREADY_TAKEN;
                }
                else if(count($types) == 2) //this account has already two roles.
                    if(in_array("SECRETARY_OFFICER", $types))
                        if(in_array("PARENT", $types)) {
                            mysqli_rollback($con);
                            mysqli_autocommit($con, TRUE);
                            mysqli_close($con);
                            return MAX_ROLES_ALLOWED;
                        } else
                            $validUserTypes = array("PARENT"); //we can add a parent only in this case.
                    else if(in_array("TEACHER", $types))
                        if(in_array("PRINCIPAL", $types))
                            $validUserTypes = array("PARENT"); 
                        else
                            $validUserTypes = array("PRINCIPAL");
                    else if(in_array("SYS_ADMIN", $types))
                        $validUserTypes = array("SECRETARY_OFFICER");
                    else
                        $validUserTypes = array("TEACHER");
                else if(count($types) == 1)
                    if($types[0] == "SYS_ADMIN")
                        $validUserTypes = array("SECRETARY_OFFICER", "PARENT"); 
                    else if($types[0] == "SECRETARY_OFFICER")
                        $validUserTypes = array("SYS_ADMIN", "PARENT");   
                    else if($types[0] == "PARENT")
                        $validUserTypes = array("SYS_ADMIN", "PRINCIPAL", "SECRETARY_OFFICER", "TEACHER"); 
                    else if($types[0] == "TEACHER")
                        $validUserTypes = array("PRINCIPAL", "PARENT");  
                    else if($types[0] == "PRINCIPAL")
                        $validUserTypes = array("TEACHER", "PARENT"); 
            }
            
            /* Update role of this account */
            if(!in_array($usertype, $validUserTypes)) { 
                mysqli_rollback($con);
                mysqli_autocommit($con, TRUE);
                mysqli_close($con);
                return ROLE_NOT_ALLOWED;
            } 
            else {
                /* Insert account type into user_type table */
                if(!$prep4 = mysqli_prepare($con, "INSERT INTO `USER_TYPE` (`SSN`, `UserType`) VALUES (?, ?)"))
                    throw new Exception();
                if(!mysqli_stmt_bind_param($prep4, "ss", $ssn, $usertype)) 
                    throw new Exception();
                if(!mysqli_stmt_execute($prep4)) 
                    throw new Exception();
                else { 
                    if(!mysqli_commit($con)) //do the final commit
                        throw new Exception();
                    //sendMail($username, $password); //to send real e-mail
                    mysqli_stmt_close($prep4);
                    mysqli_autocommit($con, TRUE);
                    mysqli_close($con);
                    return UPDATE_ACCOUNT_OK;
                }
            }
        }
        } catch (Exception $e) {
            mysqli_rollback($con);
            mysqli_autocommit($con, TRUE);
            mysqli_close($con);
            return INSERT_ACCOUNT_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function check_inactivity () {
    if(session_status() === PHP_SESSION_NONE) {
        session_start();
    }
	$t = time();
	$diff = 0;
    $new = false;
    
	if(isset($_SESSION['time'])) {
		$t0 = $_SESSION['time'];
		$diff = ($t - $t0); 
	}
	else {
		$new = true;
	}
	if ($new || ($diff > MAX_INACTIVITY)) {
		$_SESSION = array(); //in this way I delete session variable (initializing it to a new array) but ID remains for the next session!

		if(ini_get("session.use_cookies")) { //to kill the session, delete also session cookie! (by setting it to a past expiry time)
			$params = session_get_cookie_params();
			setcookie(session_name(), '', time() - 3600*24, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);
        }
        //By using the above mechanism, the next session does NOT see the cookie, and so it will give a new ID for the session :)
        session_destroy(); 
		if ($new) { 
			header('HTTP/1.1 307 temporary redirect');
			header('Location: index.php');
		}
        else { //Redirect client to login page
            return -1;
		}
		exit; //IMPORTANT to avoid further output from the script
	}
	else {
        $_SESSION['time'] = time(); //Update time
	}
}

# get children given the parent
function get_children_of_parent($parentUsername, $ini_path=''){
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();

    $children_query = "SELECT C.SSN, C.Name, C.Surname\n" .
                      "FROM CHILD C, USER P\n" .
                      "WHERE (SSNParent1=P.SSN OR SSNParent2=P.SSN) AND P.Email=?";
    if(!$con){
        die('Error in connection to database. [Children query]'."\n");
    }
    $children_prep = mysqli_prepare($con, $children_query);
    if(!$children_prep){
        print('Error in preparing query: '.$children_query);
        die('Check database error:<br>'.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($children_prep, "s", $parentUsername)){
        die('Error in binding parameters to children_prep.'."\n");
    }
    if(!mysqli_stmt_execute($children_prep)){
        die('Error in executing children query. Database error:<br>'.mysqli_error($db_con));
    }
    $children_res = mysqli_stmt_get_result($children_prep);
    $children_data = array();
    while($row = mysqli_fetch_array($children_res, MYSQLI_ASSOC)){
        $fields = array("SSN" => $row['SSN'], "Name" => $row['Name'], "Surname" => $row['Surname']);
        $children_data[] = $fields;
    }
    mysqli_stmt_close($children_prep);
    return $children_data;
}
# end children of a parent

# functions to manage Marks from Parent side
function get_scores_per_child_and_date($childSSN, $startDate, $endDate, $ini_path=''){
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();

    $marks_query = "SELECT Name, Date, Score\n" .
                    "FROM MARK M, SUBJECT S\n" .
                    "WHERE M.SubjectID=S.ID AND StudentSSN=? AND Date>=str_to_date(?,'%Y-%m-%d') AND Date<=str_to_date(?,'%Y-%m-%d')\n" .
                    "ORDER BY Date";
    if(!$con){
        die('Error in connection to database. [Marks retrieving]'."\n");
    }
    $marks_prep = mysqli_prepare($con, $marks_query);
    if(!$marks_prep){
        print('Error in preparing query: '.$marks_query);
        die('Check database error:<br>'.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($marks_prep, "sss", $childSSN, $startDate, $endDate)){
        die('Error in binding paramters to marks_prep.'."\n");
    }
    if(!mysqli_stmt_execute($marks_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $marks_res = mysqli_stmt_get_result($marks_prep);
    $scores = array();
    while($row = mysqli_fetch_array($marks_res, MYSQLI_ASSOC)){
        $fields = array("Subject" => $row['Name'], "Date" => $row['Date'], "Score" => $row['Score']);
        $scores[] = $fields;
    }
    mysqli_stmt_close($marks_prep);
    return $scores;
}

function get_list_of_subjects($childSSN, $ini_path=''){
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();

    $subjects_query = "SELECT DISTINCT(Name)\n" . 
                      "FROM MARK M, SUBJECT S\n" . 
                      "WHERE M.SubjectID=S.ID AND StudentSSN=?\n" . 
                      "ORDER BY Name";
    if(!$con){
        die('Error in connection to database. [Retrieving subjects of student]'."\n");
    }
    $subjects_prep = mysqli_prepare($con, $subjects_query);
    if(!$subjects_prep){
        print('Error in preparing query: '.$subjects_query);
        die('Check database error:<br>'.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($subjects_prep, "s", $childSSN)){
        die('Error in binding paramters to marks_prep.'."\n");
    }
    if(!mysqli_stmt_execute($subjects_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $subjects_res = mysqli_stmt_get_result($subjects_prep);
    $subjects = array();
    while($row = mysqli_fetch_array($subjects_res, MYSQLI_ASSOC)){
        $subjects[] = $row['Name'];
    }
    mysqli_stmt_close($subjects_prep);
    return $subjects;
}

function get_score_visualization($decimalScore){
    # TODO: conversion from decimal to human-known score
}
# end Marks Parent

function isInThisWeek($date) {
    ## Check if date is in this week
    $FirstDay = date("d/m/Y", strtotime('sunday last week'));  
    $LastDay = date("d/m/Y", strtotime('sunday this week'));  
    return $date > $FirstDay && $date < $LastDay;
}

function recordTopic($class, $date, $startHour, $SubjectID, $teacherSSN, $Title, $Description, $ini_path='') {
    if(!isInThisWeek($date))
        return MARK_RECORDING_FAILED;
        
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();
    
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO TOPIC VALUES(?, STR_TO_DATE(?,'%d/%m/%Y'), ?, ?, ?, ?, ?);")) 
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep, "ssiisss", $class, $date, $startHour, $SubjectID, $teacherSSN, $Title, $Description)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep)) 
                throw new Exception();
            else{
                return TOPIC_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            //return TOPIC_RECORDING_FAILED." ".$e;
            return TOPIC_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function recordMark($student, $subject, $date, $class, $score, $ini_path='') {
    if(!isInThisWeek($date))
        return MARK_RECORDING_FAILED;

    $con = connect_to_db($ini_path);
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO MARK VALUES(?, ?, STR_TO_DATE(?,'%d/%m/%Y'), ?, ?);")) 
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep, "sissd", $student, $subject, $date, $class, $score)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep)) 
                throw new Exception();
            else{
                return MARK_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            //return MARK_RECORDING_FAILED." ".$e;
            return MARK_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function insertStudent($SSN, $Name, $Surname, $Parent1, $Parent2, $Class, $ini_path=''){
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();
    if($con && mysqli_connect_error() == NULL) {
        try {
            if(!$prep = mysqli_prepare($con, "INSERT INTO CHILD VALUES(?, ?, ?, ?, ?, ?);")) 
                throw new Exception();
            if(!mysqli_stmt_bind_param($prep, "ssssss", $SSN, $Name, $Surname, $Parent1, $Parent2, $Class)) 
                throw new Exception();
            if(!mysqli_stmt_execute($prep)) 
                throw new Exception();
            else{
                return STUDENT_RECORDING_OK;
            }
        } catch (Exception $e) {
            mysqli_close($con);
            return "Student already exists.";
            //return STUDENT_RECORDING_FAILED;
        }
    } else {
        return DB_ERROR;
    }
}

function get_attendance($childSSN, $ini_path=''){
    if ($ini_path !== '')
        $con = connect_to_db($ini_path);
    else
        $con = connect_to_db();

    $attendance_query = "SELECT StudentSSN, Date, Presence, ExitHour\n" . 
                      "FROM ATTENDANCE\n" . 
                      "WHERE StudentSSN=?\n";             
    if(!$con){
        die('Error in connection to database. [Retrieving subjects of student]'."\n");
    }
    $attendance_prep = mysqli_prepare($con, $attendance_query);
    if(!$attendance_prep){
        print('Error in preparing query: '.$attendance_query);
        die('Check database error:<br>'.mysqli_error($con));
    }
    if(!mysqli_stmt_bind_param($attendance_prep, "s", $childSSN)){
        die('Error in binding paramters to marks_prep.'."\n");
    }
    if(!mysqli_stmt_execute($attendance_prep)){
        die('Error in executing marks query. Database error:<br>'.mysqli_error($con));
    }
    $attendance_res = mysqli_stmt_get_result($attendance_prep);
    $attendance = array();
    while($row = mysqli_fetch_array($attendance_res, MYSQLI_ASSOC)){
        $attendance[] = $row;
    }
    mysqli_stmt_close($attendance_prep);
    return $attendance;
}

### Presence report by a teacher
# retrieve classes of a teacher
function get_classes_of_teacher($teacherUsername, $ini_path=''){
    $class_query = "SELECT DISTINCT Class\n" .
                   "FROM TEACHER_SUBJECT T, USER U\n" .
                   "WHERE T.TeacherSSN=U.SSN AND U.Email=?";

    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Classes of teacher]'."\n");
    }
    $classes_prep = mysqli_prepare($db_con, $class_query);
    if(!$classes_prep){
        print('Error in preparing query: '.$class_query);
        die('Check database error:<br>'.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($classes_prep, "s", $teacherUsername)){
        die('Error in binding paramters to classes_prep.'."\n");
    }
    if(!mysqli_stmt_execute($subjects_prep)){
        die('Error in executing classes query. Database error:<br>'.mysqli_error($db_con));
    }
    $classes_res = mysqli_stmt_get_result($classes_prep);
    $classes = array();
    while($row = mysqli_fetch_array($classes_res, MYSQLI_ASSOC)){
        $classes[] = array("Class" => $row['Class']);
    }
    mysqli_stmt_close($classes_prep);
    return $classes;
}

# retrieve student of a class
function get_students_of_class($class, $ini_path=''){
    $student_class_query = "SELECT SSN, Name, Surname\n" .
                           "FROM CHILD\n" .
                           "WHERE Class=?";

    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Students in class]'."\n");
    }
    $student_class_prep = mysqli_prepare($db_con, $student_class_query);
    if(!$student_class_prep){
        print('Error in preparing query: '.$student_class_query);
        die('Check database error:<br>'.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($student_class_prep, "s", $class)){
        die('Error in binding parameters to student_class_prep.'."\n");
    }
    if(!mysqli_stmt_execute($student_class_prep)){
        die('Error in executing students per class query. Database error:<br>'.mysqli_error($db_con));
    }
    $student_class_res = mysqli_stmt_get_result($student_class_prep);
    $students = array();
    while($row = mysqli_fetch_array($student_class_res, MYSQLI_ASSOC)){
        $fields = array("SSN" => $row['SSN'], "Name" => $row['Name'], "Surname" => $row['Surname']);
        $students[] = $fields;
    }
    mysqli_stmt_close($student_class_prep);
    return $students;
}

# retrieve presence and early exit of students of a class per date
function get_list_presences_class_per_date($class, $date, $ini_path=''){
    $query_presences = "SELECT A.StudentSSN, Presence, ExitHour\n" .
                       "FROM ATTENDANCE A, CHILD C\n" .
                       "WHERE A.StudentSSN=C.SSN AND C.Class=? AND A.Date=STR_TO_DATE(?,'%d/%m/%Y')";

    $db_con = connect_to_db($ini_path);
    if(!$db_con){
        die('Error in connecting to database. [Presences of students in class].'."\n");
    }
    $presences_class_prep = mysqli_prepare($db_con, $query_presences);
    if(!$presences_class_prep){
        print('Error in preparing query: '.$query_presences);
        die('Check database error:<br>'.mysqli_error($db_con));
    }
    if(!mysqli_stmt_bind_param($presences_class_prep, "ss", $class, $date)){
        die('Error in binding parameters to presences_class_prep.'."\n");
    }
    if(!mysqli_stmt_execute($presences_class_prep)){
        die('Error in executing presences per class query. Database error:<br>'.mysqli_error($db_con));
    }
    $presences_class_res = mysqli_stmt_get_result($presences_class_prep);
    $presences = array();
    while($row = mysqli_fetch_array($presences_class_res, MYSQLI_ASSOC)){
        $fields = array("SSN" => $row['StudentSSN'], "Presence" => $row['Presence'], "ExitHour" => $row['ExitHour']);
        $presences[] = $fields;
    }
    mysqli_stmt_close($presences_class_prep);
    return $presences;
}
### END Presence report by a teacher

?>